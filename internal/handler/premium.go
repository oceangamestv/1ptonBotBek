package handler

import (
	"fmt"
	"github.com/kbgod/coinbot/internal/service"
	"github.com/kbgod/illuminate"
	"github.com/kbgod/illuminate/router"
	"strconv"
	"strings"
)

var premiumMenuText = map[string]string{
	"en": "üèµ Premium\n\n<b>Benefits:</b>\n<i>‚Ä¢ X2 mining</i>\n<i>‚Ä¢ A coin skin in the shape of a coconut</i>\n<i>‚Ä¢ Name in the leaderboard in gold color</i>\n<i>‚Ä¢ No ads</i>\n<i>‚Ä¢ Support developers</i>\n\n<b>Your balance:</b> <code>$%s</code>\nFor top up write message: @kbgod\n\n‚ö†Ô∏è <i>After pressing the premium button, it will be purchased immediately</i>",
	"ru": "üèµ –ü—Ä–µ–º–∏—É–º\n\n<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n<i>‚Ä¢ X2 –º–∞–π–Ω–∏–Ω–≥</i>\n<i>‚Ä¢ –°–∫–∏–Ω –Ω–∞ –º–æ–Ω–µ—Ç—É –≤ –≤–∏–¥–µ –∫–æ–∫–æ—Å–∞</i>\n<i>‚Ä¢ –ò–º—è –≤ —Ç–æ–ø–µ –∑–æ–ª–æ—Ç—ã–º —Ü–≤–µ—Ç–æ–º</i>\n<i>‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã</i>\n<i>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</i>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>$%s</code>\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ: @kbgod\n\n‚ö†Ô∏è <i>–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –∫—É–ø–ª–µ–Ω–æ</i>",
	"uk": "üèµ –ü—Ä–µ–º—ñ—É–º\n\n<b>–ü–µ—Ä–µ–≤–∞–≥–∏:</b>\n<i>‚Ä¢ X2 –º–∞–π–Ω—ñ–Ω–≥</i>\n<i>‚Ä¢ –°–∫—ñ–Ω –Ω–∞ –º–æ–Ω–µ—Ç—É —É –≤–∏–≥–ª—è–¥—ñ –∫–æ–∫–æ—Å—É</i>\n<i>‚Ä¢ –Ü–º'—è –≤ —Ç–æ–ø—ñ –∑–æ–ª–æ—Ç–∏–º –∫–æ–ª—å–æ—Ä–æ–º</i>\n<i>‚Ä¢ –ù–µ–º–∞—î —Ä–µ–∫–ª–∞–º–∏</i>\n<i>‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤</i>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>$%s</code>\n–î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–∏—à—ñ—Ç—å: @kbgod\n\n‚ö†Ô∏è <i>–ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–º—ñ—É–º –±—É–¥–µ –ø—Ä–∏–¥–±–∞–Ω–æ –æ–¥—Ä–∞–∑—É</i>",
}

func (h *Handler) Premium(ctx *router.Context) error {
	u := getUserFromContext(ctx.Context)

	buttons := make([]illuminate.InlineKeyboardButton, 0, len(service.PremiumPacks))
	for id, pack := range service.PremiumPacks {
		buttons = append(buttons, illuminate.CallbackBtn(
			fmt.Sprintf("%dD - $%s", pack.Days, pack.Price), fmt.Sprintf("buy_premium/%d", id)),
		)
	}
	m := illuminate.NewInlineMenu().Fill(2, buttons...)

	return ctx.ReplyWithMenuVoid(langf(premiumMenuText, u.LanguageCode, u.BalanceUSD.StringFixedBank(5)), m)
}

var notEnoughBalanceText = map[string]string{
	"en": "‚ùå Not enough balance",
	"ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
	"uk": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤",
}

var premiumPurchasedText = map[string]string{
	"en": "üèµ Premium purchased for %d days. Expires at %s",
	"ru": "üèµ –ü—Ä–µ–º–∏—É–º –∫—É–ø–ª–µ–Ω –Ω–∞ %d –¥–Ω–µ–π. –ò—Å—Ç–µ–∫–∞–µ—Ç %s",
	"uk": "üèµ –ü—Ä–µ–º—ñ—É–º –∫—É–ø–ª–µ–Ω–æ –Ω–∞ %d –¥–Ω—ñ–≤. –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è %s",
}

func (h *Handler) BuyPremium(ctx *router.Context) error {
	u := getUserFromContext(ctx.Context)
	id, err := strconv.Atoi(strings.TrimPrefix(ctx.Update.CallbackQuery.Data, "buy_premium/"))
	if err != nil {
		return err
	}
	if id > len(service.PremiumPacks) {
		return fmt.Errorf("premium pack not found: %d", id)
	}

	pack := service.PremiumPacks[id]

	if u.BalanceUSD.LessThan(pack.Price) {
		return ctx.AnswerAlertVoid(langf(notEnoughBalanceText, u.LanguageCode))
	}

	if err := h.svc.BuyPremium(u, pack); err != nil {
		return err
	}

	_ = ctx.AnswerAlertVoid(
		langf(
			premiumPurchasedText, u.LanguageCode,
			pack.Days, u.PremiumExpiresAt.UTC().Format("2006.01.02 15:04:05")+" UTC",
		),
	)

	return h.Start(ctx)
}
